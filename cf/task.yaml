AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template for creating a task definition"
Parameters:
  EcrImage:
    Default: 'grails-market'
    Type: String
  ECSClusterName:
    Default: 'grails-market-cluster'
    Type: String
  ECSContainerName:
    Default: 'grails-market-container'
    Type: String
  ALBName:
    Default: 'grails-market-alb'
    Type: String
  ALBTGName:
    Default: 'grails-market-alb-tg'
    Type: String
  ALBSGName:
    Default: 'grails-market-alb-sg'
    Type: String
  ALBSGContainersName:
    Default: 'grails-market-alb-sg-containers'
    Type: String
  VPCId:
    Description: ID de la VPC
    Type: AWS::EC2::VPC::Id
  SubnetsId:
    Description: ID de la subnet atachada al alb
    Type: List<AWS::EC2::Subnet::Id>
Resources:
  MyTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - "FARGATE"
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole"
#      Cpu: 256
#      Memory: 512
      Cpu: 1024
      Memory: 2048
      NetworkMode: "awsvpc"
      ContainerDefinitions:
        - Name: !Ref EcrImage
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrImage}:latest"
#          MemoryReservation: 256
#          Memory: 512
          MemoryReservation: 1024
          Memory: 2048
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
### ECS Cluster              
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Ref ECSClusterName
###ALB      
  FargateAlb:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Ref ALBName
      Subnets: !Ref SubnetsId
#        - subnet-580b0331
#        - subnet-7102210a
#        - subnet-c40f7b89
      Type: application
      SecurityGroups:
        - !GetAtt FargateAlbSG.GroupId
  MyFargateTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Ref ALBTGName
      VpcId: !Ref VPCId 
      Protocol: HTTP
      Port: 8080
      HealthCheckPath: /actuator/
      TargetType: ip
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref MyFargateTargetGroup
          Type: forward
      LoadBalancerArn: !Ref FargateAlb
      Port: 80
      Protocol: HTTP
  FargateAlbSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SG for the Fargate ALB
      GroupName: !Ref ALBSGName
      SecurityGroupIngress:
        - CidrIpv6: ::/0
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
          Description: 'Inbound rule for IPv6 traffic'
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
          Description: 'Inbound rule for IPv4 traffic'
## SG containers          
  Alb2FargateContainers:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SG for traffic between ALB and containers
      GroupName: !Ref ALBSGContainersName
      SecurityGroupIngress:
        - IpProtocol: -1
          SourceSecurityGroupId: !GetAtt FargateAlbSG.GroupId
          Description: 'Inbound rule for all traffic'
## Service
  MyECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - Listener
    Properties:
      LaunchType: FARGATE
      Cluster:
        Ref: "ECSCluster"
      DesiredCount: 1
      TaskDefinition:
        Ref: "MyTaskDefinition"
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt Alb2FargateContainers.GroupId
#          Subnets: ['subnet-580b0331','subnet-7102210a','subnet-c40f7b89']
          Subnets: !Ref SubnetsId
      LoadBalancers:
        - TargetGroupArn:
            Ref: MyFargateTargetGroup
          ContainerPort: 8080
          ContainerName: !Ref EcrImage

